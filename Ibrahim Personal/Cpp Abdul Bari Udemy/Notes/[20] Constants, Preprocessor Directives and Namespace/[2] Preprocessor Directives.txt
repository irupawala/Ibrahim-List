- These are also called as macros
- These are instructions to compiler so that before starting compilation it can follow those instructions.
- Most famous of these are #define

e.g 1: 

# define PI 3.1425

int main()
{

cout << PI;
}

- Here the value of PI will be replaced by 3.1425 before the compilation begins hence the compiler will 
see 3.1425 in the program and not PI.

- We can also do:

e.g. 2: 

# define c cout // hence now we can also change object name

int main()
{

c << PI;
}

- These # define pi (value) are known as SYMBOLIC CONSTANTS

e.g. 3: 

- We can also define functions as pre-processor directives:

# define SQR(x) (x * x) NOTICE THAT EQUATION (x*x) HAS TO BE WRITTEN IN BRACKETS

int main()
{

cout << SQR(5);

}

- Here 5 * 5 will be seen by the compiler. It has been replaced even before the compilation begins

e.g. 4:

If we define the pre-processor directive with just #x then during the comiplation the string will 
be replaced with double quotes in the defination.

# define MSG(x) #x

int main()
{

cout << MSG(Hello); // here MSG(Hello) will be replaced by "Hello" and Hello will be displayed on the screen

}


e.g. 5:

Ifndef: // if not defined

# ifndef: 
	# define PI 3.142517
# endif

- Defining the value only if it is not defined because redefining will cause an error.

