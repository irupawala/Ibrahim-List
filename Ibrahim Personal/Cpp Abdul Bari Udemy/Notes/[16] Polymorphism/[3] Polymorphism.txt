

- Now here when innova object is pointed by the pointer then the innova function start will be displayed and similarly when the swift object is 
pointed by the base class pointer then the swift function will be called.

- Hence the pointer is the same but the objects are different and hence as we are using virtual function different functions are called depending
upon the object pointed by the pointer. Here the lines c->start is the same that is pointer is calling the same function but of different objects. 
This is nothing but POLYNORPHISM. And in the example below we are acheiving RUN TIME POLYMORPHISM.
The same Mechanism in JAVA is called DYNAMIC METHOD DISPATCH.



// Function in the base class has to be virtual because we know that whenever the function of the derived class is called using the 
base class pointer then the function of the derived class object only must be called.

// Also note that the derived class like Innova, Swift are defined first and then base class is defined to achieve generalization CAR in this case.
And generalization is done to achieve polymorphism. so that we can call innova and swift using the same base class pointer car.

// Here there is no use of the base class functions even though derived class is inheriting from it, because the functions inherited from
the base class are already overridden in the derived class. Hence we can remove the function code in the base class because the objects of the 
base class will never be created. But we wrote those functions in the base class to just achieve polymorphism and we want those functions to be implemented 
by the derived class. Also, we want to force overriding of the functions present in the base class in the derived class. To make this COMPULSARY we 
have to assign virtual base function ZERO. This is called PURE VIRTUAL FUNCTION.

DERIVED CLASS FUNCTION MUST OVERRIDE PURE VIRTUAL FUNCTION OF THE BASE CLASS OTHERWISE THE FUNCTIONS OF THE DERIVED CLASS WILL BECOME ABSTRACT.
HENCE THE PURPOSE OF THE PURE VIRTUAL FUNCTION IS TO ACHIEVE POLYNORPHISM.

YOU CANNOT CREATE THE OBJECT OF BASE CLASS HERE BUT YOU CAN HAVE A POINTER OF THE CAR CLASS.


#include <iostream>

using namespace std;


class Car
{

public:
    virtual void start() = 0;


    virtual void stop() = 0;

};

class Innova: public Car
{

public:
    void start()
    {
        cout << "Innova Started" << endl;
    }

    void stop()
    {
        cout <<"Innova Stopped" << endl;

    }

};

class Swift: public Car
{

public:
    void start()
    {
        cout << "Swift Started" << endl;
    }

    void stop()
    {
        cout <<"Swift Stopped" << endl;

    }



};
int main()
{
    Car *c = new Innova();
    c -> start(); // here the innova function start will be called
    c = new Swift();
    c -> start(); // here the swift function start will be called
    return 0;
}
