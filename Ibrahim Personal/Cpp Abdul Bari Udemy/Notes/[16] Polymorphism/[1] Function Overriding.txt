* Function overriding is nothing but overriding the function defined in the base class from the derived class.

Consider the example below:

#include <iostream>

using namespace std;


class Base
{
public:
    void display()
    {
        cout << "Display of Base" << endl;
    }
};

class Derived: public Base
{
public:
    void display() // By giving the same name to the function you have overrided the function display.
    {
        cout << "Display of Derived" << endl;
    }
};
class Derived_Parameteized: public Base // FUNCTION OVERLOADING
{
public:
    void display(int x) // By giving the same name to the function you have overrided the function display.
    {
        cout << "Display of Parameterized Derived" << endl;
    }


};
int main()
{
    Derived d;
    Derived_Parameteized dp;
    d.display(); // Calling the overrided display of derived class
    d.Base::display(); // Calling the display of base
    dp.display(10);
    return 0;
}


- Here if the function signature or prototype is same as that of the one defined in the base class then that function is overrided and 
we call it FUNCTION OVERRIDING.

- Also here if the function name in the derived class is same but the arguments given to the function is different from the one defined
in the base class then that is FUNCTION OVERLOADING