* STATIC MEMBERS

- Consider the Class test with a contructor test

class Test
{
private:
int a;
int b;

public:
static int count; // static member

Test()
{
a=10; 
b=10;
count ++;
}
};

int test::count =0; // count to be used only within the class test hence scope resolution is given


main ()
{

Test t1;
Test t2;
cout << t1.count; // accessed using object
cout << t2.count;
cout << Test::count; // accessed using class name
}


- Here note that both of these classes will have its own a and b
- But Count will be allocated in the memory only once and will be 
shared by both t1 and t2.
- HENCE STATIC VARIABLES OR DATA MEMBERS BELONG TO CLASS AND NOT OBJECT
AND ALL THE OBJECTS CAN USE IT. THESE ARE COMMON FOR ALL OBJECTS AND CAN BE SHARED BY ALL
THE MEMBERS OF THE CLASS.
- Static Variable should also be defined outside the class just like global variables
but we want it to be accessed by only test class hence we have to use 
scope resolution operator.

- But note here that the count will be incremented both the times the object T1 and T2 are created
hence the final value of count will be 2.

Also note that the static data members can be accessed using object also
and can be accessed also using CLASS NAME if they are public as shown below.

cout << Test::count;

* STATIC MEMBER FUNCTION:


class Test
{
private:
int a;
int b;


public:
static int count; // static member

Test()
{
a=10; 
b=10;
count++;
}

static int getcount()
{
a++; // Not accessible
return count; // accessible
};

int test::count =0; // count to be used only within the class test hence scope resolution is given

Notice the static int getcount() here which is static members function can only access
count and not a++. 
HENCE STATIC MEMBERS FUNCTIONS CAN ONLY ACCESS STATIC DATA MEMBERS (AND NOT NON STATIC DATA MEMBERS)
AND HENCE STATIC MEMBERS FUNCTIONS BELONGS TO A CLASS AND CAN BE CALLED SIMILARLY TO STATIC MEMBERS 
USING SCOPE RESOLUTION OPERATOR

main()
{

cout << test::getcount(); // accessed using class name
Test t1;
cout<<t1.getcount(); // accessed using object
}
