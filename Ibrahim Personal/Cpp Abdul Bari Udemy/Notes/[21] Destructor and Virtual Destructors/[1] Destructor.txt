- Let us define a constructor first. The destructor will have the same name as the 
contructor but with ~ before it

e.g. 1:

class Test
{

public:

	Test()
	{
	cout << "Test Created"; // called automatically when the object is created
	}
	
	~Test() // called automatically when object is destroyed.
	{
	cout << "Test Destroyed";
};
	
int main ()
	{
	Test t; // constructor will be called here when object is created
	} // destrcutor will be called here that is when program ends all the objects used are destroyed.
	
	
e.g. 2:

Let us say that we have allocated memory dynalically in heap

main()
{

Test *p = new Test(); // contructor will be called

delete p; // destructor will be called

}

* Constructors are used for initizalization purpose there is also one more use of constructors
** CONSTRUCTORS ARE USED FOR ALLOCATING THE RESOURCES THEN DESTRUCTORS ARE USED FOR DEALLOCATING RESOURCES

These resources include external things like heap memory, file, etc anything the class is acquiring

e.g.

class Test
{

int *p;
ifstream fis;

Test() // constructor allocating resources
{
p = new int [10];
fis.open("my.txt");

}

~Test() // destrcutor deallocating resources.
{
delete[]p;
fis.close();
}
};



** DIFFERENCE BETWEEN CONSTRUCTORS AND DESTRUCTORS:

* Constructors can be over-loaded while destructors cannot be
* Both constructors and destructors cannot return anything
* All the rules of constructors are also followed by destructors 
* Destructors can also be virtual like constructors

