Note that in this example the main objective is to overload the insertion and extraction operator.
This is because when we want to write the members of the objects of the class to a file we want that all the 
members of the object are written by calling extraction operator.

** This program demonstrates storing the state of the object

#include <iostream>
#include <fstream>

using namespace std;

class Student
{
public:
    string name;
    int roll;
    string branch;
    //friend ofstream & operator<<(ofstream &ofs, Student &s);

/*
public:
    Student() {}
    Student(string n, int r, string b)
    {
        name = n;
        roll = r;
        branch = b;
    }
    friend ofstream & operator<<(ofstream &ofs, Student &s);

    */
};

/*

ofstream & operator<<(ofstream &ofs, Student &s)
{
    ofs<<s.name<<endl;
    ofs<<s.roll<< endl;
    ofs<<s.branch<<endl;
    return ofs;
}

*/

int main()
{
    Student s;
    s.name = "John"; s.roll = 10; s.branch="CS";

    ofstream ofs("Student.txt");
   // ofs << s1;

    ofs<<s.name<<endl;
    ofs<<s.roll<< endl;
    ofs<<s.branch<<endl;
    ofs.close();

    // Instead of this can we write ofs << s1 and complete object is returned.
	// Hence it is possible to store the state of the object and retrieve the state of the object
    // To do this we have to overload the insertion operator << in the student class
    return 0;
}



** This program demonstrates retrieving the state of the object

#include <iostream>
#include <fstream>

using namespace std;

class Student
{
public:
    string name;
    int roll;
    string branch;


    Student() {}
    Student(string n, int r, string b)
    {
        name = n;
        roll = r;
        branch = b;
    }

    friend ofstream & operator<<(ofstream &ofs, Student &s);
    friend ifstream & operator>>(ofstream &ifs, Student &s);

};



ofstream & operator<<(ofstream &ofs, Student &s)
{
    ofs<<s.name<<endl;
    ofs<<s.roll<< endl;
    ofs<<s.branch<<endl;
    return ofs;
}

ifstream & operator>>(ifstream &ifs, Student &s) //note that data of the file will get read to student object reference &s
{
    ifs >> s.name >> s.roll >> s.branch;
    return ifs;
}



int main()
{
    Student s;

    ifstream ifs("Student.txt");
    ifs >> s;

    cout << "Name " << s.name << endl;
    cout << "Roll " << s.roll << endl;
    cout << "Branch " << s.branch << endl;
    ifs.close();


    return 0;
}
