1. FRIEND FUNCTION

- We know that any function outside the class can only access the public data members of the base class.

class test
{

private:
	int a;
protected:
	int b;
public:
	int c;
	
friend void fun();
	
};

void fun()
{
Test t;
t.a = 5;
t.b = 10;
t.c = 15;
}

Hence if we want to allow any function outside the class to access all its data members then we have to declare 
that function as FRIEND function inside the class AND THE OUTSIDE FUNCTION SHOULD HAVE OBJECT OF THAT CLASS

Now this fun() can access all the private, public and protected function of the class UPON OBJECT.
This is useful in operator overloading.

2. FRIEND CLASS

- Similarly to friend function we have friend class

class your;

class my
{
private:
int a = 10;

**friend your;
};

class your
{
public:
my m;
void fun()
{
cout << m.a;
}
};

Here the class "your" has an object of the class "my" hence it has a "HasA" relationship. Now we want to access the private variable
in the "your" class which we cannot access as we know but we can define the "your" class as friend class similarly like 
friend function and can access the private members of the "your" class UPON OBJECT.

But in C++ the compiler processes each line of code in a sequence. Hence the compiler won't recognize "your" class in the "my" class
as "your" class is defined after it.

Due to this we have to define the your class (JUST DECLARATION AND NOT BODY OF THE CLASS) above My class using the statement

class your; 

// Also here the your class is a container of the object of the My class hence we call it CONTAINER CLASS.