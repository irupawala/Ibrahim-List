# python3

#from collections import namedtuple

#Bracket = namedtuple("Bracket", ["char", "position"])

'''

Time Complexity - O(len(s))
Space Complexity - O(len(s))


'''    


def are_matching(left, right):
    return (left + right) in ["()", "[]", "{}"] # To check if there is a match for opening bracket


def find_mismatch(text):
    opening_brackets_stack = []
    flag = True
    position = 0
    for i, next in enumerate(text):
        
        if next in "([{":
            # Process opening bracket, write your code here
            opening_brackets_stack.append(next)
            # Flag to store cases where opening bracket remains unclosed. Example ()({}
            if flag == True: 
                flag = False # Make the flag False first if there is a matching closing bracket it will be turned false in the code block for closing brackets
                if position == 0: # To make sure we are recording the position for only first unclosed opening bracket. []{(){
                    position = i # As soon as it finds that certain flag is unclosed it records the position of first such flag and then doesn't allows to change it


        if next in ")]}":
            # Process closing bracket, write your code here
            if (opening_brackets_stack == []) : # If the first received bracket is closing, return the position immediately as the first priority if for the closing bracket
                return(i+1)
            
            left = opening_brackets_stack.pop()
            right = next     
            if (are_matching(left,right)):
                flag = True #If the flag is false from opening bracket code block it will be turned false here 
                continue
            else:
                return(i+1)
                break
            
    if (len(opening_brackets_stack) != 0): # return the position of first unclosed opening bracket is stack is empty
        return position + 1
    else:
        return "Success"



def main():
    text = input()
    mismatch = find_mismatch(text)
    # Printing answer, write your code here
    print(mismatch)
    
    
############################################# Unit Testing ###############################################
    
import os     
def test():
    

    filename_list = []
    for root, dirs, files in os.walk("./tests"):
        for filename in files:
#            if '.a' not in filename:
            if not filename.endswith('.a'): 
                filename_list.append(filename)
                filename_list.sort()
                
    for filename in filename_list:
        
        print('........................')
        print('Running Test: ' + filename)
            
        f=open("./tests/" + filename, "r")
        if f.mode == 'r':
            test_input = f.read().rstrip('\n')
            f.close()
        f=open("./tests/" + filename + '.a', "r")
        if f.mode == 'r':
            expected_output =f.read().rstrip('\n')
            f.close()
            
        output = find_mismatch(test_input)
        
 
        print('Input: ' + str(test_input))
        print('Expected Output: ' + str(expected_output))
        print('Ouput: ' + str(output))



        if str(expected_output)==str(output):
            print('Test Passed')
        else:
            print('Test Failed')
            break    

    print("Passed all tests !!")
       

#############################################################################################################

if __name__ == "__main__":
#    main()
    test()

############################################### Sample Inputs ##############################################
    
'''

foo(bar(i)
(((000
([{)]}
()())
((()))
[](()
{[}
([{[[([(({[{({{{({{{{(({[([([({{[({{[{[[{{[([(([([[{{{{{{({[[[[[(({[[[([[{[[[[([((([[({{[{(({[(([[[[([[{({{{({{{(({[[(([({{{{{{[{([[{[[{{{[{{{(([([{[([({{[[[{[[({([{{{{{(({((([[({((({[{{[([{{{{((({[({[{([[[([{{{{[[{({(([([([([[[(((([[[[[{(([{[((({[([{(([[{([[[((({{({{{[({{([({({[[[[{{({({(({[[[[(([([{(((((({[{[([{([({{{({([[({({{[((({{[[{[{[{[({([([((([[[{({[[([[({[([([({[[{(([{[[([({[[([([[[[[{{{(([[{[[[[[([([{((({(({{{{[(({({[{({[{[([[{([({((([[[[(({({{[[{[({{{({[{{(([{[{(([{[({[[[{[(([({{{({[(((([{[{[({[[[[[({[{((([{{[((({[{[{[[{{[({{[{[[[(([([[{[[({{(({[[{([{[([{([({{[([[({[{[[[[[{[(((([[([[[((({((({({{([(({{({((({({{(([[([[(([(([({[(([[([[{{{([([({([[{[([[{{[[({{{[{{(((((([{(({{[[([[{[{{[([[[[[({(({([{{{{(([{[({[{[{{({[{{[[(({([[(([([{{{{{([[[{[[[[(({{{({{{{[(([{(({{{[[{{(({[{[((([[[{[[{[{(({{[{{({{{{[{{(((([[[([(([([([({(([{{{([{(([[{({[{[{[[({({{([{[{{(({[{([{[{[{(([({([{[{{(({([[(((([([{[{([{[([({{[{[((({{({{[[[[(((([[({[{([(([{([{{{[({([{{[[({[{[{{([[(([{{({[(([[{([[({(([[({{(({({([(({[({{[{[[[[[[{{([({[(([({({[{{([{{({({{{([[[[[{({[{({[{{[[[{{{({(([(([{{{[([(({[{({[{[({{({{[((({{{{(({[{{{{{{(({[[[[({({(({([([({{([[{[{([{{[{{[((({([[{([{[[({[{{[[({{{{([[([{([{([([{{((([[[(([{{([{(([[((([([[([({[[{[{(((({(({((((((([[{({({{{[{[((([((([({({([{{[([([[[{[{({[{[[{{({[{[{((({({(([{({({[([[{{[([{([([{([((({([(([{[([[({((({[[({[(({(((([[({([(((([({{(([[([{[((([{[[[(([{[{[{[([{[({{[([[(({({[[([[((({[[((([([{{([{(([{[[[(({(({[(((([{([(({[([(([({({({{({([(([(([({{[[[{[[{{([([[[{({[{{[({[({{[{{{{[({({[[{{({[[{(([(((({{[{([{(([[[{[([[{(({(({[[[[[({[[({({{[({({[[{{({[([[([[[[{([{{{[{{([[{([[((([[{({{[({({{{({[{({{({((([[{[[{({{[{((([{({([[{{{[((({[(({{([{{[{[{{[{[[({(({([[{[[{({({{{[(([{{[[({{{{[{{(([((({{{{{({[[{[([[{({[[([[({{((({([{(([[[[{{[({[{[([[{([(([((([{[[{([((([[{{[([[[[[({[{({({{[[{{({[([{{[([[[{[{([([{({({{{(([{{[[{[[({[({({[[([{[{{{({(({[{{[{([((((({{{[[{({{{(({{{[[([[{[{[[[[({([{(({({(({({({([[(([[{[(([([{[(([{[{[{{[{{[{{{({(({[({{[{[[[[{([([[({{[({{([[(({{{(((({[{([([{[(([[[[[{{({[{[[[([{[[[{[{([[(([[{{(({{{{(([({([[(([{(((([([{({([[[[[{[({{[[[{{({([((({{[[(([{{([{[({(([[{[(({[{{[({{{[({[[[{{{[[{({({{[{{({{[({([[([{{{[({(({{(({[[{[([{((({[{(({({[((([([([([({([{([{([{(({[{{([{[{([{({[({[(({((({(([[{[(([[([{[{([({[{([{{((({(({([{({[((({([{(({{{{{[(({[{{([{(({[((([({[[[(([{{([({{{{[(([(({(([({{{{[{[{(({[[{{{{{(([[[({{([[[({([{{([{([[(([([ ... }}}})]))}))]))]}}}})])}}]))]]]})])))]}))}])}}]}))]}}}}}))}])})))]})}])}))})))}}])}]})])}]}])]]))]}]]))})))}))]})]})}])}]}])}}]}))}])}])}])})])])])])))]})}))}]})))}])]}]]}))}}))})]}}}])]])})]}})}}]}})})}]]}}}]]]})]}}})]}}]}))]}]]))})]}])}}]))]]}})))])})}}]]]}})]}]]]]])})}])]))))}]))]])})]))}}}}))}}]]))]])}]}]]]}])]]]}]})}}]]]]]))]}])])}]}))))}}}))]])}})]}})]])])}]]]]}]}})]}))})}}}]}}]}}]}]}]))]}])]))]}]]))]])})})}))})}))}])})]]]]}]}]])]]}}}))}}})}]]}}})))))])}]}}]}))})}}}]}])]]})})]})]]}]]}}]))}}})})}])])}]}]]])]}}])]})}}]]}})})}]})]]]]])]}}]])))])}]]}])))]))])}]])]}]})]}}]]]]))}])})))}})]])]]})}]])]}]]})}}}}})))]))}}]}}}})]]}}]))]}}})})}]]}]])}))})]]}]}}]}]}}])}}))]})))]}}}]])})}])))}]}})}]]}]])))})}})}]})}}})})]}})}]])))]])}]])}}]}}}])}]]]])]])]})}}]]})})]}})})]]})]]]]]}))}))}]])]}]]]))}])}]}}))))]))}]]})}}]]})})]}}}}]}})]})]}}]})}]]])])}}]]}]]]}})]))]))])})}})})})]))])]}))])}]))))]}))}))]]]}]))}])}}])])))]]})))]])]]})}))]])]}})]}])]}]}]}]))]]]}])))]}])]]))}})]))))])})]]))))}))]})]]})))})]])]}]))])})))])}])])}])]}}]])]})})}]))})})))}]}]})}}]]}]})}]}]]])])]}}])})})])))])))]}]}}})})}]])))))))}))}))))}]}]]})])]])])))]]))}])}}]))]]])))}}])])}])}])]])}}}})]]}}]})]]}])}]])})))]}}]}}])}]}]])}})])])}))})})]]]]}))}}}}}}]}))}}}})))]}})}})]}]})}]}))])]}}}]))]))})}}}]]]}}]})}]})}]]]]])}}})})}}])}}]})})]))]})])}}]]]]]]}]}})]}))])})}))}})]]))})]])}]]))]})}}]))]])}}]}]})]]}}])})]}}}])}]))])}]})]]))))]]]]}})}})))]}]}})])]}])}]}])]))))]])}))}}]}])})]))}]}]}])}]}))}}]}])}})})]]}]}]})}]]))}])}}}]))})])])]))])]]]))))}}]}}}})}}]}}))}]}]]}]]])))]}]}))}}]]}}}))}]))]}}}})}}}))]]]]}]]])}}}}}])]))]])}))]]}}]})}}]}]})]}]))}}}}])}))})]]]]])]}}]}]])]]}}))}]))))))}}]}}})]]}}]])]}]])})])])}}}]])]]))]})]))]))]])]]))}})})))})}}))])}})})))})))]]])]]))))]}]]]]]}]})]])]}})])}])]}])}]]}))}})]]}]])]))]]]}]}})]}}]]}]}]})))]}}])))}]})]]]]]})]}]}]))))]})}}})]))]}]]]})]}]))}]}]))}}]})}}})]}]]}})}))]]]])))})])}]])]}]})}]})}))]}}}}))})))}])])]]]]]}]]))}}}]]]]])])]]})])]]}]))}]]})])])]})]])]]})}]]])))])])})]}]}]}]]}})))]}})})]])})}}})])}])]}]}))))))}])]))]]]]}))})})}}]]]]})})])}})]}}})}})))]]])}]]))}])]})))]}]))}]]]]]))))]]])])])]))})}]]}}}}])]]])}]})]})))}}}}])]}}]})))})]])))}))}}}}}])})]]}]]]}})])]}])]))}}}]}}}]]}]])}]}}}}}})]))]]}))}}})}}})}]])]]]]))]}))}]}})]])))])]]]]}]])]]]}))]]]]]})}}}}}}]])]))])]}}]]}]}})]}})])])]}))}}}})}}})}]}))])]]}])
][
({[]
[]](
[]()(()    
    

'''