* Ponters:

- poiners are the variables which is used to store the address of the data:
- Based on this variables are classified into two types:
	1. Data Variables
	2. Address Variables
	
- Data variable - int x = 10, meaning x is stored in location 200/ 201
- Address variable - int *P; P = &x. This means P is stored in location say 300/301 and
it contains the address of x which is 200/ 201.

How to display all these numbers:

- cout << x; Displays 10
- cout << &x --> 200
- cout << p --> 200
- cout << &p --> 300
- cout << *p --> 10: // This will show the data of the address where p is pointing. This is called "Dereferencing".


Declaration - int *p;
Initialization p = &x;
Dereferencing cout << *p

* Why Pointers ??

1. 
- Main programs can directly access code section and stack ONLY but NOT HEAP.
-Directly means it can take address directly go there and take the data.
- But it can access heap memory indirectly. The pointer in stack can have the address
of the data in heap thus allowing the program to access the data in heap.

2. The files in the Disk are accessed using only FILE pointers
3. Network connections are accessed by the program using pointers
4. Keyboard/ Monitors/ Printers are accessed indirectly accessed using pointers.

**** LANGUAGES LIKE JAVA AND C# DOES NOT HAVE POINTERS HENCE WE CANNOT ACCESS THESE DEVICES THROUGH THE PROGRAM AT ALL.
**** YOU CAN ACCESS THESE ONLY USING JVM OR COMMON LANGUAGE RUNTIME IN C# OR .NET
**** Hence System level programming cannot be done using Java or C#.
**** Operating systems and device drivers are thus programmed using C++.

* POINTERS OF ANY TYPE TAKES THE SAME SIZE.

- int *p;
- double *q;
- then sizeof(p) will be equal to sizeof(q)
