* Enum: 

- Many times in programming it is required to assign a code to the variable. This can be assigned as follows:

const int CS = 0;
const int ECE = 1;
const int IT = 2;
const int civil = 3;

- Instead of doing this we can assign constants using the enum. This will also declare a user defined datatype. Let us define a new datatype named dept

enum dept {cs, ece, it, civil}; // by doing this cs = 0, ece = 1... will be assigned automatically

- We can also define the constants the way we want

enum dept {cs=1, ece, it, civil}; // ece will be assigned 2 automatically

- Also now we can use these names in the code as a new user defined datatype

int main()
	{
		dept d;
		d = cs;
		d = ece
	}
	
- You can also do this

enum day {mon=1, tue, wed=5, thur, fri, sat=9, sun} // notice that thur=6, fri=7 will be assigned automatically

- now we can use

int main()
	{
		day d;
		d=mon;
		d=fri;
		d=0; // This is not allowed
		
	}
	
- NOTE THAT THE CONSTANT ASSIGNED USING ENUM CANNOT BE MODIFIED
- you cannot do something like d = mon++
	
* Typedef:

- Typedef is used to address the readability issue
- We can use datatype to know what does the variable mean.
- e.g.

int main()
	{
	int m1, m2, m3, r1, r2, r3;
	}
	
- here m are marks and r are integers
- We can define m's and r's as datatype to make it more readable
- e.g.

typedef int marks;
typedef int rollno;

int main()
	{
		marks m1, m2, m3;
		roll no r1, r2, r3;
	}
	
- Here if we forgot what are m1, m2, etc we can know from the typedef
that it is marks datatype with int datatype.
