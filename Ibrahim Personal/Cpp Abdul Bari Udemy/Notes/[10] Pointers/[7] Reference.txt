Reference:

main()

{

int x=10; // let us say x is stored in memory location 200/ 201
int &y = x; // here y is alias or nickname of the x. you can acess the same memory location using both x and 
y name

x++; y++; // will both increment the value stored in 200 by 1
cout << x << y << endl; // this both will print the value at 200

Another Topic:

int a;
a = x; // x is called r value, 12 will be stored in a. hence here x is "data", literal, constant value.
x = 25; // here x is called l value. Here we want 25 to be stored in the location (200) where x is pointing. the 
data at this location (200) gets overwrtitten by 25. So In this case x is "address of x"

*** Variable written on right hand side r-value means "DATA"
*** Variable written on left hand side l-value means "ADDRESS"

int &y = x; // here though x is written on right but what is given to the name of y ?. The same address which x is poiting to. 
// This means the x here is l-value of x;

Important concept:

Here x is occupying 2 bytes of memory (Integer). Then what amount of memory y is occupying ?. Answer is y is not occupying
any memory. hence "REFERENCE DOES NOT OCCUPY ANY MEMORY".

Important concept: 

Once the Alias or reference y is created. The name "y" cannot be used as a reference for any other variable.
int &y = a; // This cannot be written in the same function at all.

*** HOW WOULD YOU CREATE REFERENCE OF AN INTEGER:

int x = 10;
int *y = &x; y is a pointer to x
int *&z = y; z is an alias of y. note that how for creating alias pointer we have to add * just like declaring
			 normal pointer