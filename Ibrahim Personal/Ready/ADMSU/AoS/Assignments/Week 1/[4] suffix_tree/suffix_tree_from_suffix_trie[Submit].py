
# python3
#import sys

'''
Running Time - O(|Text|+|Patterns|)
Space - O(Tree^2)
'''

from collections import defaultdict


# Construct the tree of suffixes the same way tree of patterns is created in assignment 1
def create_trie(text):
    """
    Create trie from the patterns
    """
    trie = defaultdict(dict)
    counter = 0
    patterns = [text[i:] for i, _ in enumerate(text)]
    for pid, pattern in enumerate(patterns):
        current_node = 0
        for index, letter in enumerate(pattern):
            if letter in trie[current_node]:
                current_node = trie[current_node][letter]
            else:
                counter += 1
                trie[current_node][letter] = counter
                current_node = counter
    return trie


def get_suffix_edges(trie):
    """
    Use Backtracking (depth first search) to get all the edges
    """
    result = list()

    def dfs(index, text_string):
        
        # No childs for leaf nodes hence append to result 
        if index not in trie and text_string: 
            result.append(text_string) # If end of the tree, then append
            return
        
        # Append edge if current node has more then two branches
        current_branch = trie[index]
        if len(current_branch) > 1 and text_string: 
            result.append(text_string) # If branching out, append till last branch and reset text string
            text_string = ""
        
        # Keep on concataning edge till the node having more then two outgoing edges or leaf node is found
        for letter, ind in current_branch.items():
            dfs(ind, text_string + letter) 

    dfs(0, "")
    return result


def build_suffix_tree(text):
    """
    Build a suffix tree of the string text and return a list
    with all of the labels of its edges (the corresponding
    substrings of the text) in any order.
    """
    trie = create_trie(text)
    result = get_suffix_edges(trie)
    return result


if __name__ == '__main__':
#    text = sys.stdin.readline().strip()
    # text = "GCTGTTACGGCACGGCGAGGCCTAGGCTCGCCAATCGCCGAGCAGGAACCCGTTCATATATCCGAAGAACTACTGTGCGGAGGGCGTATGGCATGTGGGCTGAGGTCGGACTCTTTCACCATTCCCATGATAGCGGAAACTCGTCTAGGAGGTGGTCATTACAAGATGGACTGGATCCAGCCGCTTGGAGTACACACTATATTACATCTCCGCGATTGTCCGCTGCATCTGCCCCACGGCCCAGCTCTTCGCGAAAGGGTTACGTCGCCAGGCCGATCTTTCGTCCAGGTCTGGTCAGGTGGTGTGCCAGACTTGTATACCTGTCCATGGGTCTACACTGCGTTCAATGTACTAAGCAACATGTTTTATTCATTAATAAGAAAACTCGAACAGTCTGCTGGCCGTGGGCGAGTGCGTTATGCTCCGCCAACTAGGCGCAGGCTAACCACAGACAATGAGAATAGAGACACTGGGGTAGCGAAGTTGTCTACAGTGTGTCACTATAAAAAGACGGAAGCGCCTTATGCCAACTGACGGAAACCCGTATCGAGGTGCACGCGTGTCTCGCCCACTCACGCGGGTCACCTTCTGTCTTACACCTTCGTGAGTGTCTTACCCCCCTGATGGGAGGCTAAAAACATGTAAGATGCCCGCTGGCAGGCTGGGAAGCGGATAGCTAGGAGGATATGTAAGCGTTAAACTGCCACAAAGACTTGCACAACCGGCTGGCTATAACCATGCACTCCCACCGGGCCTGTCAAGAGGTAGTGTGTGCCGACGCGGATCGCCTCAATGACTGAACAGATTGGCTAAGGTCGGCTACGTCGGGGACTCTGAGGTTTAATATGACCTATTCTCGTGTTATGTTTCCTATAGACGATTTGAGTGTAACCCTTGACGTTGGATAGGGCACCTCTGTTGGTGAATAAAAGTAATGAATCGCGGGGGTGCGCCTGTACGGATTTTAAGCCGATGCATCCCCAAAGTGTGGTAGCATTTCAATGTTAGTATTAGGCTTCACGCGTCAGGCAGTGACCTTTCGTGTAACTAAACATAATAAAGACATTTATTCGGTACATCTAGTTCGGGTGCTCACGCTACATACACGCAGTCCATCGAACGTGTCCGCAAAATAAGCAAGGGACCCCAGTTTCAGCCATTATAAGGCGCTACGAAAGGCTATTTGGACAAGAGCTGCCGTACGGCTTCGGTCTTGTCTAGTATCATGGCTCCCTGCCTCTGGGATTTTATTAAACTTCGTCTCAAGGAGGAGAAGCCAGGCCAAGCCATCCACGCAAGGTTCCATAAAGCACTGCTGGTAATGGGTATCCACCTAAGCTGATTGATTAGGGAGCCCCACAATTTCGACCTTCAGCCACGTTGCATTCCCGCCAACTATTACGAACTATATGACTGATCATCAGGGCACACCGGCAAGACGAATCTCAATCAAAAGTCAGGGTAGCGGAAAAAGATGTAAAAGCAGTGTACATCGTACACGTGAGCGATAGGAAGCCAACCATCAAACTAATTTGCGCCCCCTGGTGTACGCCGCTACTTTTGAAAAGATTGGCGTCGATCCGTGTCATGAGTGCTATTCTGCACTATGTGGAATCAAATGATTGTTCACCGGGATAGCAGCGGGTCAGGCAGGCAGGAGATCCTCGGCATGCCAAAAGTTCTCTCAAACTCCTGAGAACACTCTTGTTCCTGTCTTGGCGCGCACATACCTCAGCCCGACAACTTGCATAAACGTTTTTTGTTTGATGCTCCAAAAGCATGTTGTTCGCCCATTTCGTGCATTCTTCGTGCTACATTCCCCGGTTAGGGAACGAGGATTCAGTCGCTCGAAACTACCTACCAATGGTCTAGGACTCTGGTGCTCGTCGTTGGATCTAGTATCGCAGACTGAGTAACCTATCTGTCGATGATATGACGCGTTGCCAAAGAAGAGATGTCCTTAAGGCGGGTCATGACCAATTCAAAACATATCATGACCTGGAGTCAGGTCCGGGTAAGAGCGTAGAAGCGATCCCCGGTCCAGTCAGATCACTATTTAACGGCAAAGTCTATACCCCAAGCCCGAGGTTCGGTCGACAGCCTGCGAACCGTGTTTACCGCTCCAGGAGCAATGAGATAAATGACTTGTCTCCCTGAACGGTTCTCGTCCCCACTCAATTTTATTACTATTACGCGCAGTCGCGACTTTTGATCAGGGTAGATTCGCGAGGTATACTGCCTGAAGCTTCCAACGAAAGCTCTAATTCGTAGCCTATCCCAAGCTAAATATGACATGAATTGCACTCGCGAGAAATTCTGCCACCAATGCAAGGACGCGCGTATTTCGGCCGCGCGCCAACGCTGTATGATCCGACTCCTACATA ... CTGAACAACCTCGACTCAAACTAGTGCTCCCCGTTGGCAGCGTCCACTGAATCCATACTCTAGCGTCGACGTAGGGTGGTTGCTGGAGTGCCCAAGATCTAGGAGACGGTGCCCGCGCAATGAAGCGACACCTACGTATAATTAAGTGTCTATCAATTAAACTATTGGGTGGCCGGCATGGTACGCTATCTACGACGACGGGAGACCAGCAGGGGGTTACCCCCTATCGCAAATTACCGTATTGGCAGAGTGAGACAGCACCTCGGCTTTCGCGCTGCTCGCAACCACCGGGGAGGGTTTGTCGGGACCGTCCGGACTCTCAAAAGTCCTCCCTAACCGCCCAGGTGGAAGGCATATAAGGGCGCCCCAAAGCTGAGGTAATGCGGCAGTACACTGCCGCACCTTCAAGAGGATGACAATTAGGGCTGTCGTCGCTAATGGGAAGTGTAAATTGTAAGAGAGACATAACATAATCGCATTACTTCGACACACGGATGATGAAATCTCAGTACGATCCGCGGCACATGGTGAAACGTCTTAGCCGAATATTAGCCTAACTAGTTTTTCCGGTCGACGGCGACGCCCACAACAGTCACAGTGCCTTGTCAAGTTACAAGGGATCCCATTCGAGAACCGTAGACATGCCGAAACTCGCAATGTAACTTCGTGGAATTCGGGAGCTCTAGCACCACATGTCCGAAAAATCCATAGGCGTAGTAGCATTACCCAACCTGAGACTTCCAGCTGTGAGACGTGTGATGCTGTTCTTCAACCCTATGACTCGTTTTTACAGATACGCTCATTCGAGTTCGGGGCGGCAATTCACCATTGTGCGATGAGACAGACACGGTTTGGAGGCTTTGATGTGCCTCACCGCCCCTTCAAGTAGCAGCATAAGTGGGGGAGCACGGAAAACTCACGAGCGTGGCTCGGCCCTTATTGGGAACAGTAACAAGAAGCTTAAACAGATCCTGCACAGAATAGGTAAGGCTCTAACTCATTTCGCGCAGTCCGTGATACCGCTACGAACCCCAGGTTGATCCGGACCGGAGATCATTCACATTAACCACCGCTCGCAGAGTATCTGGAGTCGGCTTACCGGCCTACCTATTCTGCGGCGACATGGCTGCTCTGTCATTCCTACAACAGCAGGGGGCAGTGTTGTGTCAACGGATGGCCTTAAACGAAGTCTTCCATTATGCTAGACCCCGTGCGGGTTGTTTCACTGACCGTTGGCTCCCGCCCGCAAGAGACTGAGCTCCTGGTCTTCGCCGCACGAGTAGTTGGCACACATGCGGACTCACTTGCTAGTGCCCCTGCACGTTAGACTGCATACATATCATCTCAATGAACAGCACGATTCCGTCCCCGTTTCTCTTTCTTAGTTGTTGACTACGAATTAGTATAACAATTCCTAGCGGTAGTCGGCCGTGCCGGTGCCTGCGCCCGTTCCAAGAGCGGGCGCGGACTTTGGGCTTGGGCGTCCAGTGATATAAGGGGGGAAGGGAAACGCCTAGCGGATGTCCATCCAATGCCGAGATGGAATTAACTTTGTACGTGTGTCCCGTTGCGTTCCGAGTTGCTCGGCTTCGGACTGGAGCAGGGAACAATACTTGCACCCGGGTAGTTGGTTCACTATGGTCATAGCAGGAATGATTTAAGGGCCCTAGAGTGGCTCCGCAACAGAATATTTGCCTCGTCGCCGTTTCGGACGTGACCTCCGGGCTGGCGGTATGAAAAAGTAGTCACACTTAGCTTCTGCTGTTGAGCCACTGAGGTAGATGCTATTTTACACAGCCGTAGGAAGACACAGGAACACCCGGCGACTCTAAAAAAAGCGTAGGTGCACCTGTGGACTGGCTGTTAATCCTATCGGGATAGCTATTTGGGCAGCGCCTTAGATTCATTCAGATGGACGACTTGGTTCTCATGGCTACGCTGTTGCCGGGTTGGGAAGTTTGCAAGCCTTCCAGGAGAATCTGTATATGTTGTGCACTGGCGACAGCACTAAGGATTTGAACTCGAAAGCTTGTGTCCCTAAAAATTGCATTTCTGGTCTTTCTTAGCCATCTCCGAGTTAAAATCCTCACGGTTGAACGCACAGGCACCCCCATGGGGCCCACGACAGTATTAGGCTTCGAGAGTTTAACAGATGACGTGACCCACTAATTAGGTTAGCTTGGATCATTTGAGCTGAGCTTCCGTTGGCCGCCTAGGTCAACTGGTTGACCATTTAGTATGCAGTAGCCATCAATAGAGGCTTTAATCTAACCCTTACAGCGCGCATAACGGTACATGAGTGGTATTCTATGAACGAGCTATCAATGTAGGATCGTTATGGAGGCGG$"
    text = "ATAAATG$"
    result = build_suffix_tree(text)
    print("\n".join(result))