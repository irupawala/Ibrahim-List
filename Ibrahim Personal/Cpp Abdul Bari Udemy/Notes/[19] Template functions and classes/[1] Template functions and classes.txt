- Template functions are used for generalization where you can write code for any type of data

template <class T>

T maximum (T x, T y)
{

return x > y ? x:y;
}

maximum (10, 15);
maximum (12.5, 9.5);

- Consider an example where the function can take multiple datatypes arguments from the template

template <class T, class R>

void add (Tx, Ry)
{
cout << x+y;
}

add(10, 12.9);

- Template classes:

- Consider an example of implementing the stack using array which contains a top pointer for pointing 
to a particular index. We also have function for pushing and popping values.

class stack
{
private:
int s[10];
int top;

public:
void push(int x);
int pop();
};

- This stack is only for integer. Hence it cannot take any datatype. Thus we can make class as template
and use it for any datatype

template <class T>
class stack
{
private:
T s[10];
int top;

public:
void push(T x);
T pop();
};

Writing the function definition outside class

template <class T>
void stack <T> :: push (T x) // whenever you are using class name you have to write template parameter <T> with it
// This is to because it indicates the type of the class
{
}

template <class T> // note that for implementing each function outside you have to give template everytime
void stack :: pop ()
{
}

// Now when we are creating object of this stack class then we have to mention which datatype it is

stack <int> s; // 
stack <float> s2; // float stack

- In C++ we can create our own user defined classes and functions of type Template (that is generic datatype)
This function is not available in java where you cannot define your own template classes but built-in 
template classes are available.



